From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Fri, 14 Mar 2025 04:23:17 +0100
Subject: st/them-context: Use yaru colors as accents

While they're very close to the GNOME ones, yaru has some variations of
the accent colors, so let's use them instead of the default ones

Colors are computed as the $yaru_accent_bg_color in yaru.
---
 src/st/st-theme-context.c | 110 +++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 109 insertions(+), 1 deletion(-)

diff --git a/src/st/st-theme-context.c b/src/st/st-theme-context.c
index eb24212..d28b244 100644
--- a/src/st/st-theme-context.c
+++ b/src/st/st-theme-context.c
@@ -40,6 +40,32 @@
 
 #define ACCENT_FG_COLOR     "#ffffff"
 
+/* These colors are optimized versions with a light contrasting content using
+ * the automated yaru machinery.
+ */
+#define YARU_ACCENT_COLOR_BLUE_LIGHT "#0070de"
+#define YARU_ACCENT_COLOR_GREEN_LIGHT "#488001"
+#define YARU_ACCENT_COLOR_ORANGE_LIGHT "#cb4314"
+#define YARU_ACCENT_COLOR_PINK_LIGHT "#ae4aae"
+#define YARU_ACCENT_COLOR_PURPLE_LIGHT "#7360d7"
+#define YARU_ACCENT_COLOR_RED_LIGHT "#d82b48"
+#define YARU_ACCENT_COLOR_SLATE_LIGHT "#627766"
+#define YARU_ACCENT_COLOR_TEAL_LIGHT "#2e7e7c"
+#define YARU_ACCENT_COLOR_YELLOW_LIGHT "#9a6800"
+
+/* These colors are optimized versions with a dark contrasting content using
+ * the automated yaru machinery.
+ */
+#define YARU_ACCENT_COLOR_BLUE_DARK "#0073E5"
+#define YARU_ACCENT_COLOR_GREEN_DARK "#4B8501"
+#define YARU_ACCENT_COLOR_ORANGE_DARK "#d34615"
+#define YARU_ACCENT_COLOR_PINK_DARK "#B34CB3"
+#define YARU_ACCENT_COLOR_PURPLE_DARK "#7764D8"
+#define YARU_ACCENT_COLOR_RED_DARK "#DA3450"
+#define YARU_ACCENT_COLOR_SLATE_DARK "#657B69"
+#define YARU_ACCENT_COLOR_TEAL_DARK "#308280"
+#define YARU_ACCENT_COLOR_YELLOW_DARK "#9f6c00"
+
 struct _StThemeContext {
   GObject parent;
 
@@ -182,6 +208,14 @@ st_theme_context_init (StThemeContext *context)
                             "notify::accent-color",
                             G_CALLBACK (update_accent_colors),
                             context);
+  g_signal_connect_swapped (st_settings_get (),
+                            "notify::color-scheme",
+                            G_CALLBACK (update_accent_colors),
+                            context);
+  g_signal_connect_swapped (st_settings_get (),
+                            "notify::gtk-theme",
+                            G_CALLBACK (update_accent_colors),
+                            context);
   g_signal_connect (st_texture_cache_get_default (),
                     "icon-theme-changed",
                     G_CALLBACK (on_icon_theme_changed),
@@ -248,8 +282,82 @@ update_accent_colors (StThemeContext *context)
 {
   StSettings *settings = st_settings_get ();
   StSystemAccentColor accent_color;
+  g_autofree char *gtk_theme = NULL;
 
   g_object_get (settings, "accent-color", &accent_color, NULL);
+  g_object_get (settings, "gtk-theme", &gtk_theme, NULL);
+
+  if (G_LIKELY (gtk_theme && g_str_has_prefix (gtk_theme, "Yaru")))
+    {
+      StSystemColorScheme color_scheme;
+      const char *color;
+
+      g_object_get (settings, "color-scheme", &color_scheme, NULL);
+
+      switch (accent_color)
+        {
+        case ST_SYSTEM_ACCENT_COLOR_BLUE:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_BLUE_DARK : YARU_ACCENT_COLOR_BLUE_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_TEAL:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_TEAL_DARK : YARU_ACCENT_COLOR_TEAL_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_GREEN:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_GREEN_DARK : YARU_ACCENT_COLOR_GREEN_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_YELLOW:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_YELLOW_DARK : YARU_ACCENT_COLOR_YELLOW_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_ORANGE:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_ORANGE_DARK : YARU_ACCENT_COLOR_ORANGE_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_RED:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_RED_DARK : YARU_ACCENT_COLOR_RED_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_PINK:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_PINK_DARK : YARU_ACCENT_COLOR_PINK_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_PURPLE:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_PURPLE_DARK : YARU_ACCENT_COLOR_PURPLE_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        case ST_SYSTEM_ACCENT_COLOR_SLATE:
+          color = color_scheme == ST_SYSTEM_COLOR_SCHEME_PREFER_DARK ?
+            YARU_ACCENT_COLOR_SLATE_DARK : YARU_ACCENT_COLOR_SLATE_LIGHT;
+          cogl_color_from_string (&context->accent_color, color);
+          break;
+
+        default:
+          g_assert_not_reached ();
+        }
+
+      cogl_color_from_string (&context->accent_fg_color, ACCENT_FG_COLOR);
+      st_theme_context_changed (context);
+      return;
+    }
 
   switch (accent_color)
     {
@@ -599,4 +707,4 @@ st_theme_context_get_resolution (StThemeContext *context)
   g_return_val_if_fail (ST_IS_THEME_CONTEXT (context), -1);
 
   return clutter_backend_get_resolution (context->clutter_backend);
-}
\ No newline at end of file
+}
