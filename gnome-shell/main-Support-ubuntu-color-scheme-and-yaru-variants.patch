From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Fri, 25 Feb 2022 01:07:12 +0100
Subject: main: Support ubuntu color-scheme and yaru variants

Make StSettings to compute the main theme and the chosen variant so that
it can be used to adapt system-wide settings.

Also support a specific shell color scheme to allow having mixed-colors
shell.

Forwarded: not-needed
---
 data/meson.build                           |  8 ++-
 data/org.gnome.shell.ubuntu.gschema.xml.in | 17 +++++++
 js/ui/main.js                              | 38 +++++++++++++-
 src/st/st-settings.c                       | 81 ++++++++++++++++++++++++++++++
 4 files changed, 142 insertions(+), 2 deletions(-)
 create mode 100644 data/org.gnome.shell.ubuntu.gschema.xml.in

diff --git a/data/meson.build b/data/meson.build
index d59cf05..6b73d3d 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -119,6 +119,12 @@ schema = configure_file(
   configuration: schemaconf,
   install_dir: schemadir
 )
+schema_ubuntu = configure_file(
+  input: 'org.gnome.shell.ubuntu.gschema.xml.in',
+  output: 'org.gnome.shell.ubuntu.gschema.xml',
+  configuration: schemaconf,
+  install_dir: schemadir
+)
 schema_ubuntu_login = configure_file(
   input: 'com.ubuntu.login-screen.gschema.xml.in',
   output: 'com.ubuntu.login-screen.gschema.xml',
@@ -168,7 +174,7 @@ endif
 
 # for unit tests - gnome.compile_schemas() only looks in srcdir
 custom_target('compile-schemas',
-  input: [schema, schema_ubuntu_login],
+  input: [schema, schema_ubuntu, schema_ubuntu_login],
   output: 'gschemas.compiled',
   command: [find_program('glib-compile-schemas'), '--strict', data_builddir],
   build_by_default: true)
diff --git a/data/org.gnome.shell.ubuntu.gschema.xml.in b/data/org.gnome.shell.ubuntu.gschema.xml.in
new file mode 100644
index 0000000..6f9cc62
--- /dev/null
+++ b/data/org.gnome.shell.ubuntu.gschema.xml.in
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schemalist gettext-domain="@GETTEXT_PACKAGE@">
+  <enum id="org.gnome.shell.ubuntu.GDesktopColorScheme">
+    <value value="1" nick="default"/>
+    <value value="2" nick="prefer-dark"/>
+    <value value="3" nick="prefer-light"/>
+  </enum>
+  <schema id="org.gnome.shell.ubuntu" path="/org/gnome/shell/ubuntu/">
+    <key name="color-scheme" enum="org.gnome.shell.ubuntu.GDesktopColorScheme">
+      <default>'default'</default>
+      <summary>Color scheme</summary>
+      <description>
+        The preferred color scheme for the shell user interface. Valid values are “default”, “prefer-dark”, “prefer-light”.
+      </description>
+    </key>
+  </schema>
+</schemalist>
diff --git a/js/ui/main.js b/js/ui/main.js
index adab13c..de05eb0 100644
--- a/js/ui/main.js
+++ b/js/ui/main.js
@@ -180,6 +180,7 @@ export async function start() {
 
     St.Settings.get().connect('notify::high-contrast', _loadDefaultStylesheet);
     St.Settings.get().connect('notify::color-scheme', _loadDefaultStylesheet);
+    St.Settings.get().connect('notify::shell-color-scheme', _loadDefaultStylesheet);
 
     // Initialize ParentalControlsManager before the UI
     ParentalControlsManager.getDefault();
@@ -456,7 +457,19 @@ function _getStylesheet(name) {
 
 /** @returns {string} */
 export function getStyleVariant() {
-    const {colorScheme} = St.Settings.get();
+    const {colorScheme, shellColorScheme} = St.Settings.get();
+
+    switch (shellColorScheme) {
+    case 'prefer-light':
+        return getStyleVariantForColorScheme(St.SystemColorScheme.PREFER_LIGHT);
+    case 'prefer-dark':
+        return getStyleVariantForColorScheme(St.SystemColorScheme.PREFER_DARK);
+    }
+
+    return getStyleVariantForColorScheme(colorScheme);
+}
+
+function getStyleVariantForColorScheme(colorScheme) {
     switch (sessionMode.colorScheme) {
     case 'force-dark':
         return 'dark';
@@ -473,6 +486,29 @@ export function getStyleVariant() {
     }
 }
 
+export function getYaruVariantFromAccent() {
+    switch (St.Settings.get().accentColor) {
+    case St.SystemAccentColor.BLUE:
+      return "blue";
+    case St.SystemAccentColor.TEAL:
+      return "prussiangreen";
+    case St.SystemAccentColor.GREEN:
+      return "olive";
+    case St.SystemAccentColor.YELLOW:
+      return "yellow";
+    case St.SystemAccentColor.ORANGE:
+      return "default";
+    case St.SystemAccentColor.RED:
+      return "red";
+    case St.SystemAccentColor.PINK:
+      return "magenta";
+    case St.SystemAccentColor.PURPLE:
+      return "purple";
+    case St.SystemAccentColor.SLATE:
+      return "sage";
+  }
+}
+
 function _getDefaultStylesheet() {
     let stylesheet = null;
     let name = sessionMode.stylesheetName;
diff --git a/src/st/st-settings.c b/src/st/st-settings.c
index 5fe1842..fe0a5c5 100644
--- a/src/st/st-settings.c
+++ b/src/st/st-settings.c
@@ -34,6 +34,7 @@
 #define KEY_ACCENT_COLOR          "accent-color"
 #define KEY_HIGH_CONTRAST         "high-contrast"
 #define KEY_GTK_ICON_THEME        "icon-theme"
+#define KEY_GTK_THEME             "gtk-theme"
 #define KEY_MAGNIFIER_ACTIVE      "screen-magnifier-enabled"
 #define KEY_DISABLE_SHOW_PASSWORD "disable-show-password"
 
@@ -46,7 +47,9 @@ enum {
   PROP_COLOR_SCHEME,
   PROP_ACCENT_COLOR,
   PROP_HIGH_CONTRAST,
+  PROP_GTK_THEME,
   PROP_GTK_ICON_THEME,
+  PROP_SHELL_COLOR_SCHEME,
   PROP_MAGNIFIER_ACTIVE,
   PROP_SLOW_DOWN_FACTOR,
   PROP_DISABLE_SHOW_PASSWORD,
@@ -63,10 +66,12 @@ struct _StSettings
   GSettings *a11y_applications_settings;
   GSettings *a11y_interface_settings;
   GSettings *lockdown_settings;
+  GSettings *ubuntu_settings;
 
   gchar *font_name;
   gboolean high_contrast;
   gchar *gtk_icon_theme;
+  gchar *gtk_theme;
   int inhibit_animations_count;
   gboolean enable_animations;
   gboolean primary_paste;
@@ -228,7 +233,9 @@ st_settings_finalize (GObject *object)
   g_object_unref (settings->a11y_applications_settings);
   g_object_unref (settings->a11y_interface_settings);
   g_object_unref (settings->lockdown_settings);
+  g_object_unref (settings->ubuntu_settings);
   g_free (settings->font_name);
+  g_free (settings->gtk_theme);
   g_free (settings->gtk_icon_theme);
 
   G_OBJECT_CLASS (st_settings_parent_class)->finalize (object);
@@ -280,6 +287,19 @@ st_settings_get_property (GObject    *object,
     case PROP_GTK_ICON_THEME:
       g_value_set_string (value, settings->gtk_icon_theme);
       break;
+    case PROP_GTK_THEME:
+      g_value_set_string (value, settings->gtk_theme);
+      break;
+    case PROP_SHELL_COLOR_SCHEME:
+      {
+        g_autoptr (GVariant) user_value = NULL;
+
+        user_value = g_settings_get_user_value (settings->ubuntu_settings,
+                                                KEY_COLOR_SCHEME);
+        g_value_set_string (value, user_value ?
+          g_variant_get_string (user_value, NULL) : NULL);
+      }
+      break;
     case PROP_COLOR_SCHEME:
       g_value_set_enum (value, settings->color_scheme);
       break;
@@ -383,6 +403,26 @@ st_settings_class_init (StSettingsClass *klass)
                                                 ST_TYPE_SYSTEM_ACCENT_COLOR,
                                                 ST_SYSTEM_ACCENT_COLOR_BLUE,
                                                 ST_PARAM_READABLE);
+  /**
+   * StSettings:gtk-theme:
+   *
+   * The current GTK theme
+   */
+  props[PROP_GTK_THEME] = g_param_spec_string ("gtk-theme",
+                                               "GTK Theme",
+                                               "GTK Theme",
+                                               "",
+                                               ST_PARAM_READABLE);
+  /**
+   * StSettings:shell-color-scheme:
+   *
+   * The current GTK theme
+   */
+  props[PROP_SHELL_COLOR_SCHEME] = g_param_spec_string ("shell-color-scheme",
+                                                        "Shell Color Scheme",
+                                                        "Shell Color Scheme",
+                                                        "default",
+                                                        ST_PARAM_READABLE);
 
   /**
    * StSettings:magnifier-active:
@@ -414,6 +454,25 @@ st_settings_class_init (StSettingsClass *klass)
   g_object_class_install_properties (object_class, N_PROPS, props);
 }
 
+static void
+update_theme_settings (StSettings *settings)
+{
+  g_auto(GStrv) parts = NULL;
+  g_autofree char *theme = NULL;
+
+  theme = g_settings_get_string (settings->interface_settings, KEY_GTK_THEME);
+  parts = g_strsplit (theme, "-", 2);
+
+  if (g_strv_length (parts) > 1)
+    g_set_str (&theme, parts[0]);
+
+  if (g_set_str (&settings->gtk_theme, theme))
+    {
+      g_object_notify_by_pspec (G_OBJECT (settings),
+                                props[PROP_GTK_THEME]);
+    }
+}
+
 static void
 on_interface_settings_changed (GSettings   *g_settings,
                                const gchar *key,
@@ -435,6 +494,10 @@ on_interface_settings_changed (GSettings   *g_settings,
       settings->font_name = g_settings_get_string (g_settings, key);
       g_object_notify_by_pspec (G_OBJECT (settings), props[PROP_FONT_NAME]);
     }
+  else if (g_str_equal (key, KEY_GTK_THEME))
+    {
+      update_theme_settings (settings);
+    }
   else if (g_str_equal (key, KEY_GTK_ICON_THEME))
     {
       g_free (settings->gtk_icon_theme);
@@ -455,6 +518,18 @@ on_interface_settings_changed (GSettings   *g_settings,
     }
 }
 
+static void
+on_ubuntu_settings_changed (GSettings   *g_settings,
+                            const gchar *key,
+                            StSettings  *settings)
+{
+  if (g_str_equal (key, KEY_COLOR_SCHEME))
+    {
+      g_object_notify_by_pspec (G_OBJECT (settings),
+                                props[PROP_SHELL_COLOR_SCHEME]);
+    }
+}
+
 static void
 on_mouse_settings_changed (GSettings   *g_settings,
                            const gchar *key,
@@ -510,6 +585,10 @@ st_settings_init (StSettings *settings)
   g_signal_connect (settings->interface_settings, "changed",
                     G_CALLBACK (on_interface_settings_changed), settings);
 
+  settings->ubuntu_settings = g_settings_new ("org.gnome.shell.ubuntu");
+  g_signal_connect (settings->ubuntu_settings, "changed",
+                    G_CALLBACK (on_ubuntu_settings_changed), settings);
+
   settings->mouse_settings = g_settings_new ("org.gnome.desktop.peripherals.mouse");
   g_signal_connect (settings->mouse_settings, "changed",
                     G_CALLBACK (on_mouse_settings_changed), settings);
@@ -526,6 +605,8 @@ st_settings_init (StSettings *settings)
   g_signal_connect (settings->lockdown_settings, "changed",
                     G_CALLBACK (on_lockdown_settings_changed), settings);
 
+  update_theme_settings (settings);
+
   settings->enable_animations = g_settings_get_boolean (settings->interface_settings,
                                                         KEY_ENABLE_ANIMATIONS);
   settings->primary_paste = g_settings_get_boolean (settings->interface_settings,
